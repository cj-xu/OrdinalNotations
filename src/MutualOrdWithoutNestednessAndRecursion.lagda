-------------------------------------------------------------
- Three equivalent ordinal notation systems in Cubical Agda -
-------------------------------------------------------------

-- Remark 3.1: an equivalent definition of MutualOrd

The metatheory of inductive-recursive definitions (A, f), where the
recursive function f : A ‚Üí A is an endofunction on the inductively
defined type A (e.g. (MutualOrd, fst) here) is in general not well
explored.  However, in this case fst is only used strictly positively
in MutualOrd and <, which means that its graph can be defined
inductive-inductively, and in turn used instead of the recursively
defined fst.  This reduces the inductive-inductive-recursive
construction to an inductive-inductive one, which is known to be
sound.

\begin{code}

{-# OPTIONS --cubical --safe #-}

module MutualOrdWithoutNestednessAndRecursion where

open import Preliminaries

import Agda.Builtin.Equality as P

\end{code}

‚ñ† Ordinal notations and their ordering

\begin{code}

infix 30 _<_ _>_ _>fst_ _‚â•fst_

data MutualOrd : Type‚ÇÄ
data _<_ : MutualOrd ‚Üí MutualOrd ‚Üí Type‚ÇÄ
data _‚â°fst_ : MutualOrd ‚Üí MutualOrd ‚Üí Type‚ÇÄ

_>_ _>fst_ _‚â•fst_ : MutualOrd ‚Üí MutualOrd ‚Üí Type‚ÇÄ

data MutualOrd where
 ùüé : MutualOrd
 œâ^_+_‚â°[_] : (a b : MutualOrd) ‚Üí a ‚â°fst b ‚Üí MutualOrd
 œâ^_+_>[_] : (a b : MutualOrd) ‚Üí a >fst b ‚Üí MutualOrd

private
 variable
  a a' b b' c d : MutualOrd
  r : a ‚â°fst b
  s : c ‚â°fst d
  r' : a >fst b
  s' : c >fst d


data _<_ where
 <‚ÇÅ‚â° : ùüé < œâ^ a + b ‚â°[ r ]
 <‚ÇÅ> : ùüé < œâ^ a + b >[ r' ]
 <‚ÇÇ‚â°‚â° : a < c ‚Üí œâ^ a + b ‚â°[ r ] < œâ^ c + d ‚â°[ s ]
 <‚ÇÇ‚â°> : a < c ‚Üí œâ^ a + b ‚â°[ r ] < œâ^ c + d >[ s' ]
 <‚ÇÇ>‚â° : a < c ‚Üí œâ^ a + b >[ r' ] < œâ^ c + d ‚â°[ s ]
 <‚ÇÇ>> : a < c ‚Üí œâ^ a + b >[ r' ] < œâ^ c + d >[ s' ]
 <‚ÇÉ‚â°‚â° : a ‚â° c ‚Üí b < d ‚Üí œâ^ a + b ‚â°[ r ] < œâ^ c + d ‚â°[ s ]
 <‚ÇÉ‚â°> : a ‚â° c ‚Üí b < d ‚Üí œâ^ a + b ‚â°[ r ] < œâ^ c + d >[ s' ]
 <‚ÇÉ>‚â° : a ‚â° c ‚Üí b < d ‚Üí œâ^ a + b >[ r' ] < œâ^ c + d ‚â°[ s ]
 <‚ÇÉ>> : a ‚â° c ‚Üí b < d ‚Üí œâ^ a + b >[ r' ] < œâ^ c + d >[ s' ]

data _‚â°fst_ where
  fstùüé : ùüé ‚â°fst ùüé
  fst‚â° : a ‚â° a' ‚Üí a ‚â°fst (œâ^ a' + b ‚â°[ r ])
  fst> : a ‚â° a' ‚Üí a ‚â°fst (œâ^ a' + b >[ r' ])
\end{code}


Note that the following definitions are abbreviations for convenience
only, since they make no use of recursion or pattern matching.

\begin{code}
a > b = b < a
a >fst b = Œ£ Œª c ‚Üí ((c ‚â°fst b) √ó a > c)
a ‚â•fst b = (a >fst b) ‚äé (a ‚â°fst b)
\end{code}


For convenience, we can define the old constructors as functions:

\begin{code}
œâ^_+_[_] : (a b : MutualOrd) ‚Üí a ‚â•fst b ‚Üí MutualOrd
œâ^ a + b [ inj‚ÇÅ r ] = œâ^ a + b >[ r ]
œâ^ a + b [ inj‚ÇÇ r ] = œâ^ a + b ‚â°[ r ]

<‚ÇÅ : ‚àÄ {r} ‚Üí ùüé < œâ^ a + b [ r ]
<‚ÇÅ {r = inj‚ÇÅ r}  = <‚ÇÅ>
<‚ÇÅ {r = inj‚ÇÇ r'} = <‚ÇÅ‚â°

<‚ÇÇ : ‚àÄ {r s} ‚Üí a < c ‚Üí œâ^ a + b [ r ] < œâ^ c + d [ s ]
<‚ÇÇ {r = inj‚ÇÅ r}  {inj‚ÇÅ s}  = <‚ÇÇ>>
<‚ÇÇ {r = inj‚ÇÅ r}  {inj‚ÇÇ s'} = <‚ÇÇ>‚â°
<‚ÇÇ {r = inj‚ÇÇ r'} {inj‚ÇÅ s'} = <‚ÇÇ‚â°>
<‚ÇÇ {r = inj‚ÇÇ r'} {inj‚ÇÇ s'} = <‚ÇÇ‚â°‚â°

<‚ÇÉ : ‚àÄ {r s} ‚Üí a ‚â° c ‚Üí b < d ‚Üí œâ^ a + b [ r ] < œâ^ c + d [ s ]
<‚ÇÉ {r = inj‚ÇÅ r}  {inj‚ÇÅ s}  = <‚ÇÉ>>
<‚ÇÉ {r = inj‚ÇÅ r}  {inj‚ÇÇ s'} = <‚ÇÉ>‚â°
<‚ÇÉ {r = inj‚ÇÇ r'} {inj‚ÇÅ s'} = <‚ÇÉ‚â°>
<‚ÇÉ {r = inj‚ÇÇ r'} {inj‚ÇÇ s'} = <‚ÇÉ‚â°‚â°

fstœâ : ‚àÄ {r} ‚Üí a ‚â°fst (œâ^ a + b [ r ])
fstœâ {r = inj‚ÇÅ x} = fst> refl
fstœâ {r = inj‚ÇÇ x} = fst‚â° refl
\end{code}

We can now define fst as an ordinary function, after the definition of
ùí™, and show that the graph relation really represents the graph of
fst.

\begin{code}
fst : MutualOrd -> MutualOrd
fst ùüé = ùüé
fst œâ^ a + b ‚â°[ r ] = a
fst œâ^ a + b >[ r' ] = a

sound-‚â°fst : a ‚â°fst b ‚Üí a ‚â° fst b
sound-‚â°fst fstùüé = refl
sound-‚â°fst (fst‚â° p) = p
sound-‚â°fst (fst> p) = p

complete-‚â°fst : a ‚â° fst b ‚Üí a ‚â°fst b
complete-‚â°fst p with PropEqfromPath p
complete-‚â°fst {b = ùüé} p | P.refl = fstùüé
complete-‚â°fst {b = œâ^ _ + _ ‚â°[ _ ]} p | P.refl = fst‚â° p
complete-‚â°fst {b = œâ^ _ + _ >[ _ ]} p | P.refl = fst> p

sound-complete-retract : ‚àÄ p ‚Üí complete-‚â°fst (sound-‚â°fst {a} {b} p) ‚â° p
sound-complete-retract p with PropEqfromPath (sound-‚â°fst p)
sound-complete-retract fstùüé | P.refl = refl
sound-complete-retract (fst‚â° x) | P.refl = refl
sound-complete-retract (fst> x) | P.refl = refl

sound-injective : ‚àÄ p q ‚Üí (sound-‚â°fst {a} {b} p) ‚â° (sound-‚â°fst {a} {b} q) ‚Üí p ‚â° q
sound-injective p q eq = (sound-complete-retract p) ‚Åª¬π ‚àô cong complete-‚â°fst eq ‚àô sound-complete-retract q

sound->fst : a >fst b ‚Üí a > fst b
sound->fst (b , x , p) with PropEqfromPath (sound-‚â°fst x)
... | P.refl = p

\end{code}

We can prove that MutualOrd defined simultaneously with fst is
isomorphic to MutualOrd defined simultaneously with the graph of
fst. Because of the simultaneous definition of MutualOrd and <, we
have to prove that the functions between the types preserve the
relation < at the same time.

\begin{code}
import MutualOrd as M

to : M.MutualOrd ‚Üí MutualOrd
to-> : {a b : M.MutualOrd} -> a M.> b -> (to a) > (to b)
to-‚â• : {a b : M.MutualOrd} -> a M.‚â• M.fst b -> (to a) ‚â•fst (to b)

to M.ùüé = ùüé
to (M.œâ^ a + b [ r ]) = œâ^ (to a) + (to b) [ to-‚â• {b = b} r ]

to-> M.<‚ÇÅ = <‚ÇÅ
to-> (M.<‚ÇÇ r) = <‚ÇÇ (to-> r)
to-> (M.<‚ÇÉ p r) = <‚ÇÉ (cong to p) (to-> r)

to-‚â• {b = M.ùüé} (inj‚ÇÅ M.<‚ÇÅ) = inj‚ÇÅ (_ , fstùüé , <‚ÇÅ)
to-‚â• {b = M.œâ^ _ + c [ r ]} (inj‚ÇÅ M.<‚ÇÅ) = inj‚ÇÅ (_ , fstœâ , <‚ÇÅ)
to-‚â• {b = M.œâ^ _ + c [ r ]} (inj‚ÇÅ (M.<‚ÇÇ p)) = inj‚ÇÅ (_ , fstœâ , <‚ÇÇ (to-> p))
to-‚â• {b = M.œâ^ _ + c [ r ]} (inj‚ÇÅ (M.<‚ÇÉ e p)) = inj‚ÇÅ (_ , fstœâ , <‚ÇÉ (cong to e) (to-> p))
to-‚â• {b = M.ùüé} (inj‚ÇÇ r') with PropEqfromPath r'
... | P.refl = inj‚ÇÇ fstùüé
to-‚â• {b = M.œâ^ b + c [ r ]} (inj‚ÇÇ p)  with PropEqfromPath p
... | P.refl = inj‚ÇÇ fstœâ

from : MutualOrd ‚Üí M.MutualOrd
from-> : a > b -> (from a) M.> (from b)
from-‚â• : a ‚â•fst b -> (from a) M.‚â• M.fst (from b)

from ùüé = M.ùüé
from (œâ^ a + b ‚â°[ r ]) = M.œâ^ (from a) + (from b) [ from-‚â• {b = b} (inj‚ÇÇ r) ]
from (œâ^ a + b >[ r' ]) = M.œâ^ (from a) + (from b) [ from-‚â• {b = b} (inj‚ÇÅ r') ]

from-> <‚ÇÅ‚â° = M.<‚ÇÅ
from-> <‚ÇÅ> = M.<‚ÇÅ
from-> (<‚ÇÇ‚â°‚â° r) = M.<‚ÇÇ (from-> r)
from-> (<‚ÇÇ‚â°> r) = M.<‚ÇÇ (from-> r)
from-> (<‚ÇÇ>‚â° r) = M.<‚ÇÇ (from-> r)
from-> (<‚ÇÇ>> r) = M.<‚ÇÇ (from-> r)
from-> (<‚ÇÉ‚â°‚â° p r) = M.<‚ÇÉ (cong from p) (from-> r)
from-> (<‚ÇÉ‚â°> p r) = M.<‚ÇÉ (cong from p) (from-> r)
from-> (<‚ÇÉ>‚â° p r) = M.<‚ÇÉ (cong from p) (from-> r)
from-> (<‚ÇÉ>> p r) = M.<‚ÇÉ (cong from p) (from-> r)

from-‚â• {b = ùüé} (inj‚ÇÅ (._ , fstùüé , p)) = inj‚ÇÅ (from-> p)
from-‚â• {a} {b = œâ^ b + c ‚â°[ r ]} (inj‚ÇÅ (b' , fst‚â° q , p)) with PropEqfromPath q
... | P.refl = inj‚ÇÅ (from-> p)
from-‚â• {b = œâ^ b + c >[ r ]} (inj‚ÇÅ (b' , fst> q , p))  with PropEqfromPath q
...| P.refl = inj‚ÇÅ (from-> p)
from-‚â• {b = ùüé} (inj‚ÇÇ fstùüé) = inj‚ÇÇ refl
from-‚â• {b = œâ^ b + c ‚â°[ r ]} (inj‚ÇÇ (fst‚â° q)) = inj‚ÇÇ (cong from q)
from-‚â• {b = œâ^ b + c >[ r ]} (inj‚ÇÇ (fst> q)) = inj‚ÇÇ (cong from q)
\end{code}

Finally, we want to check that we have an isomorphism. We first
establish that again _<_ is Prop-valued. The proof is the same as
before, and so not very interesting.

\begin{code}

rest : MutualOrd ‚Üí MutualOrd
rest  ùüé               = ùüé
rest (œâ^ _ + b ‚â°[ _ ]) = b
rest (œâ^ _ + b >[ _ ]) = b

caseMutualOrd : {A : Type ‚Ñì} (x y z : A) ‚Üí MutualOrd ‚Üí A
caseMutualOrd x y z  ùüé               = x
caseMutualOrd x y z (œâ^ _ + _ ‚â°[ _ ]) = y
caseMutualOrd x y z (œâ^ _ + _ >[ _ ]) = z

ùüé‚â¢œâ : {r : a ‚â•fst b} ‚Üí ¬¨ (ùüé ‚â° œâ^ a + b [ r ])
ùüé‚â¢œâ {r = inj‚ÇÅ r} e = subst (caseMutualOrd MutualOrd ‚ä• ‚ä•) e ùüé
ùüé‚â¢œâ {r = inj‚ÇÇ r} e = subst (caseMutualOrd MutualOrd ‚ä• ‚ä•) e ùüé

œâ‚â¢ùüé : {r : a ‚â•fst b} ‚Üí ¬¨ (œâ^ a + b [ r ] ‚â° ùüé)
œâ‚â¢ùüé {r = inj‚ÇÅ r} e = subst (caseMutualOrd ‚ä• MutualOrd MutualOrd) e ùüé
œâ‚â¢ùüé {r = inj‚ÇÇ r} e = subst (caseMutualOrd ‚ä• MutualOrd MutualOrd) e ùüé

œâ‚â°‚â¢œâ> : {r : a ‚â°fst b}{r' : a' >fst b'} ‚Üí ¬¨ (œâ^ a + b ‚â°[ r ] ‚â° œâ^ a' + b' >[ r' ])
œâ‚â°‚â¢œâ> e = subst (caseMutualOrd MutualOrd MutualOrd ‚ä•) e ùüé

œâ>‚â¢œâ‚â° : {r : a ‚â°fst b}{r' : a' >fst b'} ‚Üí ¬¨ (œâ^ a' + b' >[ r' ] ‚â° œâ^ a + b ‚â°[ r ])
œâ>‚â¢œâ‚â° e = subst (caseMutualOrd MutualOrd ‚ä• MutualOrd) e ùüé

<-irrefl : ¬¨ a < a
<-irrefl (<‚ÇÇ‚â°‚â° r) = <-irrefl r
<-irrefl (<‚ÇÇ>> r) = <-irrefl r
<-irrefl (<‚ÇÉ‚â°‚â° x r) = <-irrefl r
<-irrefl (<‚ÇÉ>> x r) = <-irrefl r

<-irreflexive : a ‚â° b ‚Üí ¬¨ a < b
<-irreflexive {a} e = subst (Œª x ‚Üí ¬¨ a < x) e <-irrefl


<IsPropValued : isProp (a < b)
>fstIsPropValued : isProp (a >fst b)
‚â°fstIsPropValued : isProp (a ‚â°fst b)
‚â§IsPropValued : {a b : MutualOrd} ‚Üí isProp (a ‚â•fst b)
MutualOrdIsDiscrete : Discrete MutualOrd
MutualOrdIsSet : isSet MutualOrd
MutualOrd‚Åº : {r : a ‚â•fst b} {s : c ‚â•fst d} ‚Üí a ‚â° c ‚Üí b ‚â° d
           ‚Üí œâ^ a + b [ r ] ‚â° œâ^ c + d [ s ]

<IsPropValued <‚ÇÅ‚â° <‚ÇÅ‚â° = refl
<IsPropValued <‚ÇÅ> <‚ÇÅ> = refl
<IsPropValued (<‚ÇÇ‚â°‚â° p) (<‚ÇÇ‚â°‚â° q) = cong <‚ÇÇ‚â°‚â° (<IsPropValued p q)
<IsPropValued (<‚ÇÇ‚â°> p) (<‚ÇÇ‚â°> q) = cong <‚ÇÇ‚â°> (<IsPropValued p q)
<IsPropValued (<‚ÇÇ>‚â° p) (<‚ÇÇ>‚â° q) = cong <‚ÇÇ>‚â° (<IsPropValued p q)
<IsPropValued (<‚ÇÇ>> p) (<‚ÇÇ>> q) = cong <‚ÇÇ>> (<IsPropValued p q)
<IsPropValued (<‚ÇÉ‚â°‚â° x p) (<‚ÇÉ‚â°‚â° x' q) = cong‚ÇÇ <‚ÇÉ‚â°‚â° (MutualOrdIsSet x x') (<IsPropValued p q)
<IsPropValued (<‚ÇÉ‚â°> x p) (<‚ÇÉ‚â°> x' q) = cong‚ÇÇ <‚ÇÉ‚â°> (MutualOrdIsSet x x') (<IsPropValued p q)
<IsPropValued (<‚ÇÉ>‚â° x p) (<‚ÇÉ>‚â° x' q) = cong‚ÇÇ <‚ÇÉ>‚â° (MutualOrdIsSet x x') (<IsPropValued p q)
<IsPropValued (<‚ÇÉ>> x p) (<‚ÇÉ>> x' q) = cong‚ÇÇ <‚ÇÉ>> (MutualOrdIsSet x x') (<IsPropValued p q)
<IsPropValued (<‚ÇÇ‚â°‚â° p) (<‚ÇÉ‚â°‚â° x q) = ‚ä•-elim (<-irreflexive x p)
<IsPropValued (<‚ÇÇ‚â°> p) (<‚ÇÉ‚â°> x q) = ‚ä•-elim (<-irreflexive x p)
<IsPropValued (<‚ÇÇ>‚â° p) (<‚ÇÉ>‚â° x q) = ‚ä•-elim (<-irreflexive x p)
<IsPropValued (<‚ÇÇ>> p) (<‚ÇÉ>> x q) = ‚ä•-elim (<-irreflexive x p)
<IsPropValued (<‚ÇÉ‚â°‚â° x p) (<‚ÇÇ‚â°‚â° q) = ‚ä•-elim (<-irreflexive x q)
<IsPropValued (<‚ÇÉ>> x p) (<‚ÇÇ>> q) = ‚ä•-elim (<-irreflexive x q)
<IsPropValued (<‚ÇÉ>‚â° x p) (<‚ÇÇ>‚â° q) = ‚ä•-elim (<-irreflexive x q)
<IsPropValued (<‚ÇÉ‚â°> x p) (<‚ÇÇ‚â°> q) = ‚ä•-elim (<-irreflexive x q)


>fstIsPropValued (.ùüé , fstùüé , p) (.ùüé , fstùüé , p') = cong (Œª z ‚Üí (_ , _ , z)) (<IsPropValued p p')
>fstIsPropValued (b , fst‚â° x , p) (b' , fst‚â° x' , p')
  with PropEqfromPath x | PropEqfromPath x'
... | P.refl | P.refl = cong (Œª z ‚Üí (b' , z))
                             (cong‚ÇÇ _,_ (cong fst‚â° (MutualOrdIsSet x x'))
                                        (<IsPropValued p p'))
>fstIsPropValued (b , fst> x , p) (b' , fst> x' , p')
  with PropEqfromPath x | PropEqfromPath x'
... | P.refl | P.refl = cong (Œª z ‚Üí (b' , z))
                             (cong‚ÇÇ _,_ (cong fst> (MutualOrdIsSet x x'))
                                        (<IsPropValued p p'))

‚â°fstIsPropValued p q = sound-injective p q (MutualOrdIsSet _ _)

‚â§IsPropValued (inj‚ÇÅ p) (inj‚ÇÅ q) = cong inj‚ÇÅ (>fstIsPropValued p q)
‚â§IsPropValued (inj‚ÇÅ p) (inj‚ÇÇ q) = ‚ä•-elim (<-irreflexive ((sound-‚â°fst q) ‚Åª¬π) (sound->fst p))
‚â§IsPropValued (inj‚ÇÇ p) (inj‚ÇÅ q) = ‚ä•-elim (<-irreflexive ((sound-‚â°fst p) ‚Åª¬π) (sound->fst q))
‚â§IsPropValued (inj‚ÇÇ p) (inj‚ÇÇ q) = cong inj‚ÇÇ (‚â°fstIsPropValued p q)

MutualOrdIsDiscrete ùüé ùüé = yes refl
MutualOrdIsDiscrete (œâ^ a + b ‚â°[ r ]) (œâ^ a' + b' ‚â°[ r' ]) with MutualOrdIsDiscrete a a'
MutualOrdIsDiscrete œâ^ a + b ‚â°[ r ] œâ^ a' + b' ‚â°[ r' ] | yes a‚â°a' with MutualOrdIsDiscrete b b'
{--- Pattern match on b, to please Agda's termination checker ---}
MutualOrdIsDiscrete œâ^ a + ùüé ‚â°[ r ] œâ^ a' + b' ‚â°[ r' ] | yes a‚â°a' | yes ùüé‚â°b'
  with PropEqfromPath a‚â°a' | PropEqfromPath ùüé‚â°b'
... | P.refl | P.refl = yes (cong (œâ^ a + ùüé ‚â°[_]) (‚â°fstIsPropValued r r'))
MutualOrdIsDiscrete œâ^ a + b@(œâ^ _ + _ ‚â°[ _ ]) ‚â°[ r ] œâ^ a' + b' ‚â°[ r' ] | yes a‚â°a' | yes b‚â°b'
  with PropEqfromPath a‚â°a' | PropEqfromPath b‚â°b'
... | P.refl | P.refl = yes (cong (œâ^ a + b ‚â°[_]) (‚â°fstIsPropValued r r'))
MutualOrdIsDiscrete œâ^ a + b@(œâ^ _ + _ >[ _ ]) ‚â°[ r ] œâ^ a' + b' ‚â°[ r' ] | yes a‚â°a' | yes b‚â°b'
  with PropEqfromPath a‚â°a' | PropEqfromPath b‚â°b'
... | P.refl | P.refl = yes (cong (œâ^ a + b ‚â°[_]) (‚â°fstIsPropValued r r'))
{------------------- End of pattern matching --------------------}
MutualOrdIsDiscrete œâ^ a + b ‚â°[ r ] œâ^ a' + b' ‚â°[ r' ] | yes p | no b‚â†b' = no Œª e ‚Üí b‚â†b' (cong rest e)
MutualOrdIsDiscrete œâ^ a + b ‚â°[ r ] œâ^ a' + b' ‚â°[ r' ] | no a‚â†a' = no Œª e ‚Üí a‚â†a' (cong fst e)
MutualOrdIsDiscrete (œâ^ a + b >[ r ]) (œâ^ a' + b' >[ r' ]) with MutualOrdIsDiscrete a a'
MutualOrdIsDiscrete œâ^ a + b >[ r ] œâ^ a' + b' >[ r' ] | yes a‚â°a' with MutualOrdIsDiscrete b b'
{--- Pattern match on b, to please Agda's termination checker ---}
MutualOrdIsDiscrete œâ^ a + ùüé >[ r ] œâ^ a' + b' >[ r' ] | yes a‚â°a' | yes ùüé‚â°b'
  with PropEqfromPath a‚â°a' | PropEqfromPath ùüé‚â°b'
... | P.refl | P.refl = yes (cong (œâ^ a + ùüé >[_]) (>fstIsPropValued r r'))
MutualOrdIsDiscrete œâ^ a + b@(œâ^ _ + _ ‚â°[ _ ]) >[ r ] œâ^ a' + b' >[ r' ] | yes a‚â°a' | yes b‚â°b'
  with PropEqfromPath a‚â°a' | PropEqfromPath b‚â°b'
... | P.refl | P.refl = yes (cong (œâ^ a + b >[_]) (>fstIsPropValued r r'))
MutualOrdIsDiscrete œâ^ a + b@(œâ^ _ + _ >[ _ ]) >[ r ] œâ^ a' + b' >[ r' ] | yes a‚â°a' | yes b‚â°b'
  with PropEqfromPath a‚â°a' | PropEqfromPath b‚â°b'
... | P.refl | P.refl = yes (cong (œâ^ a + b >[_]) (>fstIsPropValued r r'))
{------------------- End of pattern matching --------------------}
MutualOrdIsDiscrete œâ^ a + b >[ r ] œâ^ a' + b' >[ r' ] | yes p | no b‚â†b' = no Œª e ‚Üí b‚â†b' (cong rest e)
MutualOrdIsDiscrete œâ^ a + b >[ r ] œâ^ a' + b' >[ r' ] | no a‚â†a' = no Œª e ‚Üí a‚â†a' (cong fst e)
MutualOrdIsDiscrete (œâ^ a + b ‚â°[ r ]) (œâ^ a' + b' >[ r' ]) = no œâ‚â°‚â¢œâ>
MutualOrdIsDiscrete (œâ^ a + b >[ r ]) (œâ^ a' + b' ‚â°[ r' ]) = no œâ>‚â¢œâ‚â°
MutualOrdIsDiscrete ùüé (œâ^ b + c ‚â°[ r ]) = no ùüé‚â¢œâ
MutualOrdIsDiscrete ùüé (œâ^ b + c >[ r ]) = no ùüé‚â¢œâ
MutualOrdIsDiscrete (œâ^ a + b ‚â°[ r ]) ùüé = no œâ‚â¢ùüé

MutualOrdIsDiscrete (œâ^ a + b >[ r ]) ùüé = no œâ‚â¢ùüé

‚â°-normalise : a ‚â° b ‚Üí a ‚â° b
‚â°-normalise {a} {b} a‚â°b with MutualOrdIsDiscrete a b
... | yes p = p
... | no ¬¨p = ‚ä•-elim (¬¨p a‚â°b)

‚â°-normalise-constant : (p q : a ‚â° b) ‚Üí ‚â°-normalise p ‚â° ‚â°-normalise q
‚â°-normalise-constant {a} {b} p q with MutualOrdIsDiscrete a b
... | yes _ = refl
... | no ¬¨p = ‚ä•-elim (¬¨p p)

‚â°-canonical : (p : a ‚â° b)
            ‚Üí (‚â°-normalise refl) ‚Åª¬π ‚àô (‚â°-normalise p) ‚â° p
‚â°-canonical = J (Œª y p ‚Üí (‚â°-normalise refl) ‚Åª¬π ‚àô (‚â°-normalise p) ‚â° p)
                (lCancel (‚â°-normalise refl))

MutualOrdIsSet p q =
  ((‚â°-canonical p) ‚Åª¬π) ‚àô
  cong ((‚â°-normalise refl) ‚Åª¬π ‚àô_) (‚â°-normalise-constant p q) ‚àô
  ‚â°-canonical q

MutualOrd‚Åº {a} {b} a‚â°c b‚â°d with PropEqfromPath a‚â°c | PropEqfromPath b‚â°d
... | P.refl | P.refl = cong (œâ^ a + b [_]) (‚â§IsPropValued _ _)

\end{code}

Using this, it is easy to check that the roundtrips are identities:



from-to : ‚àÄ a ‚Üí from (to a) ‚â° a
from-to M.ùüé = refl
from-to (M.œâ^ a + b [ r ]) with to-‚â• {b = b} r
from-to M.œâ^ a + b [ r ] | inj‚ÇÅ x = M.MutualOrd‚Åº (from-to a) (from-to b)
from-to M.œâ^ a + b [ r ] | inj‚ÇÇ x = M.MutualOrd‚Åº (from-to a) (from-to b)

to-from : ‚àÄ a ‚Üí to (from a) ‚â° a
to-from ùüé = refl
to-from œâ^ a + b ‚â°[ r ] = MutualOrd‚Åº (to-from a) (to-from b)
to-from œâ^ a + b >[ r ] = MutualOrd‚Åº (to-from a) (to-from b)
\end{code}
